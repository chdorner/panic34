/*
 * Copyright (c) 2021 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define NAV_L 1
#define SYM_L 2
#define NUM_L 3
#define BLE_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
    combos {
        compatible = "zmk,combos";

        // ( on l and n
        ln_kp_lpar {
            timeout-ms = <50>;
            key-positions = <6 16>;
            bindings = <&kp LPAR>;
        };

        // ) on u and e
        ue_kp_rpar {
            timeout-ms = <50>;
            key-positions = <7 17>;
            bindings = <&kp RPAR>;
        };

        // { on n and m
        nm_kp_lbrc {
            timeout-ms = <50>;
            key-positions = <16 26>;
            bindings = <&kp LBRC>;
        };

        // } on e and ,
        ecomma_kp_rbrc {
            timeout-ms = <50>;
            key-positions = <17 27>;
            bindings = <&kp RBRC>;
        };

        // [ on y and i
        yi_kp_lbkt {
            timeout-ms = <50>;
            key-positions = <8 18>;
            bindings = <&kp LBKT>;
        };

        // ] on ; and o
        semio_kp_rbkt {
            timeout-ms = <50>;
            key-positions = <9 19>;
            bindings = <&kp RBKT>;
        };

        // ESC on o and '
        oquot_kp_esc {
            timeout-ms = <50>;
            key-positions = <19 29>;
            bindings = <&kp ESC>;
        };

        // - on p and l
        pl_kp_minus {
            timeout-ms = <50>;
            key-positions = <3 6>;
            bindings = <&kp MINUS>;
        };

        // _ on v and m
        vm_kp_under {
            timeout-ms = <50>;
            key-positions = <23 26>;
            bindings = <&kp UNDER>;
        };

        // ESC on a and o
        ao_kp_esc {
            timeout-ms = <50>;
            key-positions = <10 19>;
            bindings = <&kp ESC>;
        };

        // TAB on h and n
        hn_kp_tab {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp TAB>;
        };

        // caps_word on z and '
        zquot_caps_word {
            timeout-ms = <50>;
            key-positions = <20 29>;
            bindings = <&caps_word>;
        };

        ble_mo {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&mo BLE_L>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        quexmark: question_exclamation_mark {
            compatible = "zmk,behavior-mod-morph";
            label = "QMARK_EXCL";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bspcdel: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_DEL";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lt_bspc: layer_tap_backspace_delete {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_BD";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            bindings = <&mo>, <&bspcdel>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
                &kp Q      &kp W      &kp F       &kp P            &kp G              &kp J          &kp L          &kp U         &kp Y       &kp SEMI
                &hm LGUI A &hm LALT R &hm LCTRL S &hm LSHFT T      &kp D              &kp H          &hm RSHFT N    &hm RCTRL E   &hm LALT I  &hm LGUI O
                &kp Z      &kp X      &kp C       &kp V            &kp B              &kp K          &kp M          &kp COMMA     &kp DOT     &kp SQT
                                                  &lt NAV_L SPACE  &lt_bspc SYM_L 0   &kp TAB  &lt NUM_L RET
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
                &trans     &trans     &trans      &trans           &trans         &kp LG(GRAVE)  &kp LG(LBRC)   &kp LG(RBRC)  &trans      &trans
                &kp LGUI   &kp LALT   &kp LCTRL   &kp LSHFT        &trans         &kp LARW       &kp DARW       &kp UARW      &kp RARW    &trans
                &trans     &trans     &trans      &trans           &trans         &kp HOME       &kp PG_DN      &kp PG_UP     &kp END     &trans
                                                  &trans           &kp BSPC       &kp TAB        &kp RET
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
                &trans     &trans     &trans      &trans           &trans         &kp PLUS       &kp EQUAL      &kp AMPS      &kp ASTRK   &kp PRCNT
                &kp LGUI   &kp LALT   &kp LCTRL   &kp LSHFT        &trans         &kp TILDE      &quexmark      &kp HASH      &kp GRAVE   &kp FSLH
                &trans     &trans     &trans      &trans           &trans         &kp DOLLAR     &kp AT         &kp BSLH      &kp PIPE    &kp CARET
                                                  &kp SPACE        &trans         &kp TAB        &kp RET
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
                &trans     &kp N7     &kp N8      &kp N9           &kp EQUAL      &trans         &trans         &trans        &trans      &trans
                &kp N0     &kp N4     &kp N5      &kp N6           &kp MINUS      &trans         &kp RSHFT      &kp RCTRL     &kp LALT    &kp LGUI
                &kp DOT    &kp N1     &kp N2      &kp N3           &trans         &trans         &trans         &trans        &trans      &trans
                                                  &kp SPACE        &kp BSPC       &trans         &kp RET
            >;
        };

        bt_layer {
            label = "BLE";
            bindings = <
                &trans	   &trans     &trans      &trans           &trans         &trans         &trans         &trans        &trans       &bt BT_CLR
                &trans     &trans     &trans      &trans           &trans         &trans         &trans         &trans        &trans       &trans
                &trans     &trans     &trans      &trans           &trans         &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2  &bt BT_SEL 3 &bt BT_SEL 4
                                                  &trans           &trans         &trans         &trans
            >;
        };
    };
};
